import java.util.Iterator;

import LinkedQueue.Node;

/**
 *  The {@code Dequeue} class represents a double-ended
 *  queue of generic items.
 *  It supports the <em>addFirst</em>, <em>addLast</em>, <em>removeFirst</em>, <em>removeFirst</em>
 *  operations, along with methods for testing if the queue is empty, and iterating through
 *  the items in FIFO order.
 *  <p>
 *  This implementation uses a double-linked list with a nested class for
 *  linked-list nodes. 
 * 
 */
public class Dequeue<T> implements Iterable<T> {
	
	//beginning of a queue
	private Node<T> first;
	//tail of the queue
	private Node<T> last;
	//size of the queue
	private int n;
	
	//helper linked list class
	private class Node<T>{
		private T item;
		private Node<T> next;
		private Node<T> prev;
	}
	
	/**
     * Initializes an empty queue.
     */
	public Dequeue(){
		this.first = null;
		this.last = null;
		this.n = 0;
	}
	
	/**
     * Returns true if this queue is empty.
     *
     * @return {@code true} if this queue is empty; {@code false} otherwise
     */
	public boolean isEmpty(){
		return first == null;
	}
	
	/**
     * Returns the number of items in this queue.
     *
     * @return the number of items in this queue
     */
	public int size(){
		return n;
	}

	@Override
	public Iterator<T> iterator() {
		// TODO Auto-generated method stub
		return null;
	}

}
