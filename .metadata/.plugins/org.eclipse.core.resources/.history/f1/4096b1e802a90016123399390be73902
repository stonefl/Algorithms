import java.util.Iterator;
import java.util.NoSuchElementException;

import edu.princeton.cs.algs4.StdRandom;

/**
 *  The {@code RandomizedQueue} class represents randomized queue of generic items.
 *  It supports the usual <em>enqueue</em> and <em>dequeue</em>
 *  operations, along with methods for testing if the queue is empty, and iterating through
 *  the items in random order.
 *  <p>
 *  This implementation uses a resizing array, which double the underlying array
 *  when it is full and halves the underlying array when it is one-quarter full.
 *  
 */
public class RandomizedQueue<T> implements Iterable<T> {
	//queue elements
	private T[] q;
	//size of queue
	private int n;
	
	 /**
     * Initializes an empty queue.
     */
	public RandomizedQueue(){
		q = (T[]) new Object[1];
		n = 0;
	}
	
	/**
     * Is this queue empty?
     * @return true if this queue is empty; false otherwise
     */
	public boolean isEmpty(){
		return n == 0;
	}
	 /**
     * Returns the number of items in this queue.
     * @return the number of items in this queue
     */
	public int size(){
		return n;
	}
	 // resize the underlying array
	private void resize(int capacity){
		assert capacity >= n;
		T[] temp = (T[]) new Object[capacity];
		for(int i = 0; i < n; i++){
			temp[i] = q[i];
		}
		q = temp;
	}
	
	/**
     * Adds the item to this queue.
     * @param item the item to add
     */
	public void enqueue(T item){
		if(item == null) throw new NullPointerException("Cannot add null item.");
		//double size of array if necessary
		if (n == q.length){
			resize(2 * q.length);
		}
		//add item
		q[n++] = item;
	}
	
	/**
     * Removes and returns the item on this queue that was least recently added.
     * @return the item on this queue that was least recently added
     * @throws java.util.NoSuchElementException if this queue is empty
     */
	public T dequeue(){
		if(isEmpty()) throw new NoSuchElementException("Queue underflow");
		//generate a random index
		int index = StdRandom.uniform(n);
		T retnItem = q[index];
		//swap the retnItem with the last item
		q[index] = q[--n];
		q[n] = null;
		n--;
		return retnItem;
	}
	@Override
	public Iterator<T> iterator() {
		// TODO Auto-generated method stub
		return null;
	}

}
